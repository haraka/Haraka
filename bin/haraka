#!/usr/bin/env node

// this script takes inspiration from:
// https://github.com/visionmedia/express/blob/master/bin/express
// https://github.com/tnantoka/LooseLeaf/blob/master/bin/looseleaf


var fs = require('fs'),
    path = require('path'),
    nopt = require("nopt"),
    base = path.join(__dirname, '..'),
    ver = JSON.parse(fs.readFileSync(base+'/package.json', 'utf8'))['version'],
    knownOpts = {
        "version": Boolean,
        "help": Boolean,
        "configs": path,
        "install": path
    },
    shortHands = {
        "v": ["--version"],
        "h": ["--help"],
        "c": ["--configs"],
        "i": ["--install"]
    },
    parsed = nopt(knownOpts, shortHands, process.argv, 2);


var usage = [
    "\033[32;40mHaraka.js\033[0m — A Node.js Email Server project",
    "Usage: haraka [options] [path]",
    "Options:",
    "\t-v, --version \t\tOutputs version number",
    "\t-h, --help    \t\tOutputs this help message",
    "\t-c, --configs \t\tPath to your config directory",
    "\t-i, --install \t\tCopies the default configs to a specified dir"
].join('\n');


// Show message when create 
function create(path) {
//  console.log('\x1b[32mcreate\x1b[0m: ' + path);
}

// Warning messsage
function warning(msg) {
  console.error('\x1b[31mwarning\x1b[0m: ' + msg);
}

// Make directory if NOT exist
function mkDir(dstPath) {
    try {
      fs.mkdirSync(dstPath, fs.statSync(__dirname).mode);
      create(dstPath)
    } catch (e) {
      // File exists
      if (e.errno = 17) {
        warning(e.message);
      } else {
        throw e;
      }
    }
}

// Copy directory
function copyDir(srcPath, dstPath) {

  if (!/\/$/.test(srcPath)) srcPath += '/';
  if (!/\/$/.test(dstPath)) dstPath += '/';

  mkDir(dstPath);
  var files = fs.readdirSync(srcPath);
    
  for(var i = 0; i < files.length; i++) {

    // Ignore ".*"  
    if (/^\./.test(files[i])) {
      continue;
    }
    
    var srcFile = srcPath + files[i];
    var dstFile = dstPath + files[i];

    var srcStat = fs.statSync(srcFile);
      
    // Recursive call If direcotory
    if (srcStat.isDirectory()) {
      copyDir(srcFile, dstFile);
    }
    // Copy to dstPath if file
    else if (srcStat.isFile()) {
      // NOT overwrite file
      try {
        var dstStat = fs.statSync(dstFile);
        // File exists
        warning("EEXIST, File exists '" + dstFile + "'");
      } catch (e) {
        // File NOT exists
        if (e.errno = 2) {
          var data = fs.readFileSync(srcFile);
          fs.writeFileSync(dstFile, data);
          create(dstFile)
        } else {
          throw e;
        }
      }
    }
  }
}


if (parsed['version']) {
    console.log("\033[32;40mHaraka.js\033[0m — Version: " + ver);
} else if (parsed['help']) {
    console.log(usage);
} else if (parsed['configs']) {
    
    process.env.HARAKA = parsed['configs'];
    
    var logger = require(base+'/logger')
        server = require(base+'/server');
        
    process.on('uncaughtException', function (err) {
        if (err.stack) {
            err.stack.split("\n").forEach(logger.logcrit);
        }
        else {
            logger.logcrit('Caught exception: ' + err);
        }
        if (!server.ready) {
            logger.logcrit('Server not ready yet. Stopping.');
            process.exit();
        }
    });
    
    logger.log("Starting up Haraka version " + ver);
    server.createServer();
    
} else if (parsed['install']) {
    mkDir(parsed['install']);
    mkDir(path.join(parsed['install'], 'plugins'));
    copyDir(base+'/config', path.join(parsed['install'], 'config'));
} else {
    console.log("\033[31;40mError\033[0m: Undefined or erroneous arguments\n");
    console.log(usage);
}